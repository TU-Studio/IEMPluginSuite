# gitlab-ci configuration for the IEM Plugin Suite

variables:
## leave this uncommented to build all projects (except _PluginTemplate)
  #PROJECTS: AllRADecoder BinauralDecoder CoordinateConverter DirectionalCompressor DirectivityShaper DistanceCompensator DualDelay EnergyVisualizer FdnReverb MatrixMultiplier MultiBandCompressor MultiEncoder MultiEQ OmniCompressor ProbeDecoder RoomEncoder SceneRotator SimpleDecoder StereoEncoder ToolBox
  GIT_SUBMODULE_STRATEGY: recursive
  CONFIG: Release
  JUCEVERSION: 6.0.7

###################################################
# cleanup after the job (e.g. rename files for the artifacts...)
.after_script:
  - test -d IEM && find IEM -type f -exec file {} +
  - find DualDelay/Builds/ -type f -exec file {} +

###################################################
### configuration templates (to be used for snapshot and release builds)
.build:snapshot: &snapshot
  only:
    - master
    - develop
    - ci-test
  except:
    - tags
  artifacts: &snapshot_artifacts
    paths:
      - VST3
      - VST
      - Standalone
      - ChangeLog.md
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    paths:
      - VST3
      - VST
      - Standalone
      - ChangeLog.md

.build:linux: &build_linux
  stage: build
  image: ubuntu:focal
  tags:
    - docker
  script:
# install dependencies
    - apt-get update -y
    - DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends xvfb xauth curl unzip build-essential ca-certificates wget cmake
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libwebkit2gtk-4.0-dev libasound2-dev libfreetype6-dev libcurl4-gnutls-dev libgl1-mesa-dev libx11-dev libxext-dev libxinerama-dev libxrandr-dev libgtk-3-dev
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libjack-dev libfftw3-dev
    - cmake --version
# get VST2SDK
    - .git-ci/getvst.sh
# run the actual build
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DIEM_BUILD_VST2=ON -DVST2SDKPATH=src/VST_SDK/VST2_SDK/ -DIEM_BUILD_STANDALONE=ON
    - make -j $(nproc)
    - cd ..

# collect binaries for artifacts
    - mkdir VST3
    - cp -r build/*/*_artefacts/Release/VST3/*.vst3 VST3/
    - mkdir VST
    - cp -r build/*/*_artefacts/Release/VST/*.so VST/
    - mkdir Standalone
    - find build/*/*_artefacts/Release/Standalone/ -maxdepth 1 -type f -executable -not -name "*.so" -exec cp {} Standalone/ ";"

.build:osx: &build_osx
  stage: build
  tags:
    - osx10.14
  script:
# install dependencies
    - HOMEBREW_NO_AUTO_UPDATE=1 brew install jack || true
# get VST2SDK
    - .git-ci/getvst.sh
# run the actual build
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release  -DIEM_BUILD_VST2=ON -DVST2SDKPATH=src/VST_SDK/VST2_SDK/ -DIEM_BUILD_STANDALONE=ON
    - make -j $(sysctl -n hw.ncpu)
    - cd ..
# collect binaries for artifacts
    - mkdir VST3
    - cp -r build/*/*_artefacts/Release/VST3/*.vst3 VST3/
    - mkdir VST
    - cp -r build/*/*_artefacts/Release/VST/*.vst VST/
    - mkdir Standalone
    - cp -r build/*/*_artefacts/Release/Standalone/*.app Standalone/

.build:windows: &build_windows
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: vs2017
  script:
    - test -f .myenv && . .myenv
# run the actual build
    - mkdir build
    - cd build
    - cmake ..
    - cmake --build . --target ALL_BUILD --config Release
    - test -z "${PROJECTS}" && PROJECTS=$(make showprojects)
    - make system CONFIG=$CONFIG BITS=$BITS PROJUCER="/c/JUCE/Projucer.exe"
    - make CONFIG=$CONFIG BITS=$BITS PROJUCER="/c/JUCE/Projucer.exe" PROJECTS="${PROJECTS}" remove_intermediates=yes
# collect binaries for artifacts
#     - mkdir -p IEM/standalone
#     - cp */Builds/*/*/*/VST/*.dll IEM/
#     - cp */Builds/*/*/*/*/*.exe IEM/standalone/
# # embed non-standard libraries in the bundles
# # FIXME: this requires that we have either x64 or x86, not both
#     - cp resources/fftw3/*/libfftwf*.dll IEM/standalone/
#     - cp resources/fftw3/*/libfftwf*.dll IEM/

###################################################
# expand the templates to real jobs
#
# development snapshots
linux_snapshot:
  <<: *snapshot
  <<: *build_linux
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_linux

osx_snapshot:
  <<: *build_osx
  <<: *snapshot
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_macOS

# windows32_snapshot:
#   before_script:
#     - echo "BITS=32" > .myenv
#   <<: *build_windows
#   <<: *snapshot
#   artifacts:
#     <<: *snapshot_artifacts
#     name: IEMPluginSuite_w32

# windows64_snapshot:
#   before_script:
#     - echo "BITS=64" > .myenv
#   <<: *build_windows
#   <<: *snapshot
#   artifacts:
#     <<: *snapshot_artifacts
#     name: IEMPluginSuite_w64

# # release builds (for tags; artifacts are kept forever)
# linux_release:
#   <<: *release
#   <<: *build_linux
#   artifacts:
#     <<: *release_artifacts
#     name: IEMPluginSuite_${CI_COMMIT_TAG}_linux

# osx_release:
#   <<: *build_osx
#   <<: *release
#   artifacts:
#     <<: *release_artifacts
#     name: IEMPluginSuite_${CI_COMMIT_TAG}_macOS

# windows32_release:
#   before_script:
#     - echo "BITS=32" > .myenv
#   <<: *build_windows
#   <<: *release
#   artifacts:
#     <<: *release_artifacts
#     name: IEMPluginSuite_${CI_COMMIT_TAG}_w32

# windows64_release:
#   before_script:
#     - echo "BITS=64" > .myenv
#   <<: *build_windows
#   <<: *release
#   artifacts:
#     <<: *release_artifacts
#     name: IEMPluginSuite_${CI_COMMIT_TAG}_w64
